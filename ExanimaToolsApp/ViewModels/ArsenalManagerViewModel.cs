// IMPORTANT: Do not edit this file without first reading project-management/development_practices.md for ExanimaTools best practices.
// See project-management/development_practices.md for all coding and logging best practices. Do not add best practice notes here.

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using ExanimaTools.Models;
using ExanimaTools.Persistence;
using System.Collections.Generic;
using ExanimaTools.Controls;

namespace ExanimaTools.ViewModels;

public class ArsenalManagerViewModel : INotifyPropertyChanged
{
    private readonly EquipmentRepository _equipmentRepository;
    private readonly ArsenalRepository _arsenalRepository;
    private readonly ILoggingService? _logger;

    private ObservableCollection<EquipmentPiece> filteredEquipment = new();
    public ObservableCollection<EquipmentPiece> FilteredEquipment
    {
        get => filteredEquipment;
        set { if (filteredEquipment != value) { filteredEquipment = value; OnPropertyChanged(nameof(FilteredEquipment)); } }
    }
    private ObservableCollection<EquipmentPiece> arsenalEquipment = new();
    public ObservableCollection<EquipmentPiece> ArsenalEquipment
    {
        get => arsenalEquipment;
        set { if (arsenalEquipment != value) { arsenalEquipment = value; OnPropertyChanged(nameof(ArsenalEquipment)); } }
    }
    private EquipmentPiece? selectedDatabaseEquipment;
    public EquipmentPiece? SelectedDatabaseEquipment
    {
        get => selectedDatabaseEquipment;
        set { if (selectedDatabaseEquipment != value) { selectedDatabaseEquipment = value; OnPropertyChanged(nameof(SelectedDatabaseEquipment)); } }
    }
    private EquipmentPiece? selectedArsenalEquipment;
    public EquipmentPiece? SelectedArsenalEquipment
    {
        get => selectedArsenalEquipment;
        set { if (selectedArsenalEquipment != value) { selectedArsenalEquipment = value; OnPropertyChanged(nameof(SelectedArsenalEquipment)); } }
    }
    private string? searchText;
    public string? SearchText
    {
        get => searchText;
        set { if (searchText != value) { searchText = value; OnPropertyChanged(nameof(SearchText)); _ = FilterEquipment(); } }
    }
    private string? statusMessage;
    public string? StatusMessage
    {
        get => statusMessage;
        set { if (statusMessage != value) { statusMessage = value; OnPropertyChanged(nameof(StatusMessage)); } }
    }
    // Add dialog state and commands for adding equipment
    private bool isAddDialogOpen;
    public bool IsAddDialogOpen
    {
        get => isAddDialogOpen;
        set {
            if (isAddDialogOpen != value) {
                isAddDialogOpen = value;
                _logger?.Log($"IsAddDialogOpen changed: {isAddDialogOpen}");
                OnPropertyChanged(nameof(IsAddDialogOpen));
            }
        }
    }
    private EquipmentPiece newEquipment = new EquipmentPiece();
    public EquipmentPiece NewEquipment
    {
        get => newEquipment;
        set {
            if (newEquipment != value) {
                if (newEquipment != null && newEquipment is INotifyPropertyChanged npcOld)
                    npcOld.PropertyChanged -= NewEquipment_PropertyChanged;
                newEquipment = value;
                if (newEquipment != null && newEquipment is INotifyPropertyChanged npcNew)
                    npcNew.PropertyChanged += NewEquipment_PropertyChanged;
                OnPropertyChanged(nameof(NewEquipment));
                _logger?.Log($"NewEquipment changed: Type={newEquipment?.Type}, Category={newEquipment?.Category}");
                UpdateNewEquipmentDrawing();
            }
        }
    }

    private void NewEquipment_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(EquipmentPiece.Type) || e.PropertyName == nameof(EquipmentPiece.Category)) {
            _logger?.Log($"NewEquipment property changed: {e.PropertyName}");
            UpdateNewEquipmentDrawing();
        }
    }

    private string? addDialogTitle;
    public string? AddDialogTitle
    {
        get => addDialogTitle;
        set { if (addDialogTitle != value) { addDialogTitle = value; OnPropertyChanged(nameof(AddDialogTitle)); } }
    }
    private bool isEditMode;
    public bool IsEditMode
    {
        get => isEditMode;
        set { if (isEditMode != value) { isEditMode = value; OnPropertyChanged(nameof(IsEditMode)); } }
    }
    private string? errorMessage;
    public string? ErrorMessage
    {
        get => errorMessage;
        set { if (errorMessage != value) { errorMessage = value; OnPropertyChanged(nameof(ErrorMessage)); } }
    }
    private string? confirmationMessage;
    public string? ConfirmationMessage
    {
        get => confirmationMessage;
        set { if (confirmationMessage != value) { confirmationMessage = value; OnPropertyChanged(nameof(ConfirmationMessage)); } }
    }
    public ObservableCollection<string> CategoryOptions { get; } = new();
    public ObservableCollection<string> SubcategoryOptions { get; } = new();
    public Array EquipmentQualities => System.Enum.GetValues(typeof(EquipmentQuality));
    public Array EquipmentConditions => System.Enum.GetValues(typeof(EquipmentCondition));
    public Array AllRanks => System.Enum.GetValues(typeof(Rank));
    public ObservableCollection<StatType> AvailableStatTypes { get; } = new();
    private StatType? selectedStatType;
    public StatType? SelectedStatType
    {
        get => selectedStatType;
        set { if (!EqualityComparer<StatType?>.Default.Equals(selectedStatType, value)) { selectedStatType = value; OnPropertyChanged(nameof(SelectedStatType)); } }
    }
    public ObservableCollection<StatPipViewModel> NewEquipmentStatPips { get; } = new();
    private enum AddFormMode { None, Weapon, Armour, Shield }
    private AddFormMode addFormMode = AddFormMode.None;
    public ObservableCollection<EquipmentTreeNodeViewModel> PoolTree { get; } = new();
    public ObservableCollection<EquipmentTreeNodeViewModel> ArsenalTree { get; } = new();
    private EquipmentTreeNodeViewModel? selectedPoolTreeItem;
    public EquipmentTreeNodeViewModel? SelectedPoolTreeItem
    {
        get => selectedPoolTreeItem;
        set
        {
            if (selectedPoolTreeItem != value)
            {
                selectedPoolTreeItem = value;
                _logger?.Log($"[DEBUG] SelectedPoolTreeItem set: {value?.EquipmentPiece?.Name ?? "null"}");
                if (value?.EquipmentPiece != null)
                {
                    _logger?.Log($"[DEBUG] Selected EquipmentPiece stats: {string.Join(", ", value.EquipmentPiece.Stats.Select(kv => $"{kv.Key}={kv.Value}"))}");
                }
                OnPropertyChanged(nameof(SelectedPoolTreeItem));
                OnPropertyChanged(nameof(StatCardViewModel)); // Ensure stat card updates
                if (value?.EquipmentPiece != null) SelectedDatabaseEquipment = value.EquipmentPiece;
            }
        }
    }
    private EquipmentTreeNodeViewModel? selectedArsenalTreeItem;
    public EquipmentTreeNodeViewModel? SelectedArsenalTreeItem
    {
        get => selectedArsenalTreeItem;
        set { if (selectedArsenalTreeItem != value) { selectedArsenalTreeItem = value; OnPropertyChanged(nameof(SelectedArsenalTreeItem)); if (value?.EquipmentPiece != null) SelectedArsenalEquipment = value.EquipmentPiece; } }
    }
    public EquipmentTreeBrowserViewModel PoolTreeViewModel { get; }
    public EquipmentTreeBrowserViewModel ArsenalTreeViewModel { get; }
    public ICommand SaveNewEquipmentCommand { get; }
    public ICommand CloseAddDialogCommand { get; }
    public ICommand AddStatCommand { get; }
    public ICommand ShowAddWeaponFormCommand { get; }
    public ICommand ShowAddArmourFormCommand { get; }
    public ICommand ShowAddShieldFormCommand { get; }
    public ICommand AddFilterCommand { get; }
    public ICommand AddToArsenalCommand { get; }
    public ICommand RemoveFromArsenalCommand { get; }
    public ObservableCollection<EquipmentFilterViewModel> Filters { get; } = new();
    private List<EquipmentPiece> _allEquipment = new(); // Cache for filtering
    public static List<string>? StaticCategoryOptions;
    public static List<StatType>? StaticStatTypes;
    public ArsenalManagerViewModel(EquipmentRepository equipmentRepo, ArsenalRepository arsenalRepo, ILoggingService? logger = null)
    {
        _equipmentRepository = equipmentRepo;
        _arsenalRepository = arsenalRepo;
        _logger = logger;
        if (_logger == null)
            System.Diagnostics.Debug.WriteLine("[DEBUG] ArsenalManagerViewModel: Logger is null!");
        else
            _logger.LogOperation("ArsenalManagerViewModel", "Logger injected and not null");
        _logger?.LogOperation("ArsenalManagerViewModel", "Created");
        _ = LoadAsync();
        if (StaticCategoryOptions == null)
        {
            // Use all possible categories from weapon, armour, and shield maps
            var categories = new HashSet<string>();
            foreach (var cat in EquipmentManagerViewModel.WeaponCategorySubcategoryMap.Keys)
                categories.Add(cat);
            foreach (var cat in EquipmentManagerViewModel.ArmourCategorySubcategoryMap.Keys)
                categories.Add(cat);
            // Add shield subcategories as well
            if (EquipmentManagerViewModel.WeaponCategorySubcategoryMap.TryGetValue("Shield", out var shieldCats))
                foreach (var cat in shieldCats)
                    categories.Add(cat);
            StaticCategoryOptions = categories.ToList();
            // --- Fix: Update all filter viewmodels after static list is set ---
            foreach (var filter in Filters)
                filter.UpdateAvailableValues();
        }
        if (StaticStatTypes == null)
            StaticStatTypes = System.Enum.GetValues(typeof(StatType)).Cast<StatType>().ToList();
        AddToArsenalCommand = new AsyncSimpleCommand(param => AddToArsenalAsync(param));
        RemoveFromArsenalCommand = new AsyncSimpleCommand(param => RemoveFromArsenalAsync());
        PoolTreeViewModel = new EquipmentTreeBrowserViewModel(_logger)
        {
            TreeItems = PoolTree,
            SelectedTreeItem = SelectedPoolTreeItem,
            SearchText = string.Empty,
            ActionLabel = "Add",
            ActionCommand = AddToArsenalCommand
        };
        ArsenalTreeViewModel = new EquipmentTreeBrowserViewModel(_logger)
        {
            TreeItems = ArsenalTree,
            SelectedTreeItem = SelectedArsenalTreeItem,
            SearchText = string.Empty,
            ActionLabel = "Remove",
            ActionCommand = RemoveFromArsenalCommand
        };
        // Ensure ArsenalTreeViewModel.TreeItems is set after construction
        ArsenalTreeViewModel.TreeItems = ArsenalTree;
        SaveNewEquipmentCommand = new AsyncSimpleCommand(_ => SaveNewEquipmentAsync());
        CloseAddDialogCommand = new SimpleCommand(CloseAddDialog);
        AddStatCommand = new SimpleCommand(AddStat);
        ShowAddWeaponFormCommand = new SimpleCommand(ShowAddWeaponForm);
        ShowAddArmourFormCommand = new SimpleCommand(ShowAddArmourForm);
        ShowAddShieldFormCommand = new SimpleCommand(ShowAddShieldForm);
        AddFilterCommand = new SimpleCommand(AddFilter);
        editEquipmentFromTreeCommand = new SimpleCommand(() =>
        {
            if (SelectedPoolTreeItem?.EquipmentPiece != null)
                EditEquipmentFromTree(SelectedPoolTreeItem.EquipmentPiece);
        });
        Filters.CollectionChanged += (s, e) => {
            ApplyFilters();
            // Always update AvailableValues for new filters
            if (e.NewItems != null)
                foreach (var filter in e.NewItems.OfType<EquipmentFilterViewModel>())
                    filter.UpdateAvailableValues();
        };
        // Synchronize PoolTreeViewModel.SelectedTreeItem with SelectedPoolTreeItem
        PoolTreeViewModel.PropertyChanged += (s, e) => {
            if (e.PropertyName == nameof(PoolTreeViewModel.SelectedTreeItem))
            {
                SelectedPoolTreeItem = PoolTreeViewModel.SelectedTreeItem;
            }
        };
    }
    private async Task LoadAsync()
    {
        _logger?.LogOperation("ArsenalManagerViewModel", "LoadAsync called");
        _logger?.Log("LoadAsync: Loading all equipment and arsenal...");
        var allEquipment = await _equipmentRepository.GetAllAsync();
        _allEquipment = allEquipment.ToList();
        _logger?.Log($"LoadAsync: Loaded {_allEquipment.Count} equipment pieces.");
        FilteredEquipment = new ObservableCollection<EquipmentPiece>(_allEquipment);
        var arsenal = await _arsenalRepository.GetArsenalAsync(_equipmentRepository);
        _logger?.Log($"LoadAsync: Arsenal contains {arsenal.Equipment.Count} equipment pieces.");
        ArsenalEquipment.Clear();
        foreach (var eq in arsenal.Equipment)
            ArsenalEquipment.Add(eq);
        // Do not assign a new ObservableCollection to ArsenalTree or ArsenalTreeViewModel.TreeItems
        BuildTree(FilteredEquipment, PoolTree);
        // PoolTreeViewModel.TreeItems = PoolTree; // Only needed if PoolTree instance changes
        BuildTree(ArsenalEquipment, ArsenalTree);
        // ArsenalTreeViewModel.TreeItems = ArsenalTree; // Only needed if ArsenalTree instance changes
        _logger?.Log($"LoadAsync: PoolTree nodes: {PoolTree.Count}, ArsenalTree nodes: {ArsenalTree.Count}");
        // Seed shields in LoadAsync if ArsenalEquipment is empty
        if (ArsenalEquipment.Count == 0)
        {
            _logger?.Log("DEBUG: ArsenalEquipment is empty, seeding test Weapon, Armour, and Shield");
            ArsenalEquipment.Add(new EquipmentPiece {
                Name = "DEBUG TEST SWORD",
                Type = EquipmentType.Weapon,
                Category = "Sword",
                Subcategory = "Short Sword",
                Condition = EquipmentCondition.Good,
                Quality = EquipmentQuality.Common,
                Rank = Rank.Inept,
                Slot = EquipmentSlot.Hands,
                Layer = null,
                Stats = new Dictionary<StatType, float> { { StatType.Impact, 1.0f } }
            });
            ArsenalEquipment.Add(new EquipmentPiece {
                Name = "DEBUG TEST CAP",
                Type = EquipmentType.Armour,
                Category = "Head",
                Subcategory = "Cap",
                Condition = EquipmentCondition.Good,
                Quality = EquipmentQuality.Common,
                Rank = Rank.Inept,
                Slot = EquipmentSlot.Head,
                Layer = ArmourLayer.Padding,
                Stats = new Dictionary<StatType, float> { { StatType.ImpactResistance, 0.5f } }
            });
            ArsenalEquipment.Add(new EquipmentPiece {
                Name = "DEBUG TEST SHIELD",
                Type = EquipmentType.Shield,
                Category = "Round Shield",
                Subcategory = "Small Round Shield",
                Condition = EquipmentCondition.Good,
                Quality = EquipmentQuality.Common,
                Rank = Rank.Inept,
                Slot = EquipmentSlot.Hands,
                Layer = null,
                Stats = new Dictionary<StatType, float> { { StatType.Coverage, 0.8f } }
            });
        }
    }
    private async Task FilterEquipment()
    {
        var all = await _equipmentRepository.GetAllAsync();
        if (string.IsNullOrWhiteSpace(SearchText))
            FilteredEquipment = new ObservableCollection<EquipmentPiece>(all);
        else
            FilteredEquipment = new ObservableCollection<EquipmentPiece>(all.Where(e => e.Name.Contains(SearchText, System.StringComparison.OrdinalIgnoreCase)));
        BuildTree(FilteredEquipment, PoolTree);
        PoolTreeViewModel.TreeItems = PoolTree; // Notify UI
    }
    public async Task AddToArsenalAsync(object? parameter)
    {
        _logger?.LogOperation("ArsenalManagerViewModel", "AddToArsenalAsync called");
        var toAdd = parameter as EquipmentPiece ?? SelectedDatabaseEquipment;
        _logger?.Log($"AddToArsenalAsync: Attempting to add equipment: {(toAdd != null ? toAdd.Name : "null")}");
        if (toAdd == null)
        {
            StatusMessage = "Select equipment to add.";
            return;
        }
        await _arsenalRepository.AddToArsenalAsync(toAdd.Id);
        ArsenalEquipment.Add(toAdd);
        BuildTree(ArsenalEquipment, ArsenalTree);
        ArsenalTreeViewModel.TreeItems = ArsenalTree; // Notify UI
        StatusMessage = $"Added {toAdd.Name} to arsenal.";
        _logger?.Log($"AddToArsenalAsync: ArsenalEquipment now has {ArsenalEquipment.Count} items. ArsenalTree nodes: {ArsenalTree.Count}");
    }
    public async Task RemoveFromArsenalAsync()
    {
        _logger?.LogOperation("ArsenalManagerViewModel", "RemoveFromArsenalAsync called");
        _logger?.Log($"RemoveFromArsenalAsync: Attempting to remove equipment: {(SelectedArsenalEquipment != null ? SelectedArsenalEquipment.Name : "null")}");
        if (SelectedArsenalEquipment == null)
        {
            StatusMessage = "Select equipment to remove.";
            return;
        }
        var name = SelectedArsenalEquipment.Name;
        await _arsenalRepository.RemoveFromArsenalAsync(SelectedArsenalEquipment.Id);
        ArsenalEquipment.Remove(SelectedArsenalEquipment);
        BuildTree(ArsenalEquipment, ArsenalTree);
        ArsenalTreeViewModel.TreeItems = ArsenalTree; // Notify UI
        StatusMessage = $"Removed {name} from arsenal.";
        _logger?.Log($"RemoveFromArsenalAsync: ArsenalEquipment now has {ArsenalEquipment.Count} items. ArsenalTree nodes: {ArsenalTree.Count}");
    }
    private void BuildTree(ObservableCollection<EquipmentPiece> source, ObservableCollection<EquipmentTreeNodeViewModel> target)
    {
        target.Clear();
        _logger?.Log($"BuildTree: Building tree from {source.Count} equipment pieces.");
        // Always show at least Weapon and Armour and Shield root nodes
        var allTypes = new[] { EquipmentType.Weapon, EquipmentType.Armour, EquipmentType.Shield };
        var byType = source.GroupBy(e => e.Type).ToDictionary(g => g.Key, g => g.ToList());
        foreach (var type in allTypes)
        {
            var typeNode = new EquipmentTreeNodeViewModel(type.ToString(), _logger);
            if (byType.TryGetValue(type, out var items) && items.Count > 0)
            {
                var byCategory = items.GroupBy(e => e.Category);
                foreach (var catGroup in byCategory)
                {
                    var catNode = new EquipmentTreeNodeViewModel(catGroup.Key, _logger);
                    var bySubcat = catGroup.GroupBy(e => e.Subcategory);
                    foreach (var subGroup in bySubcat)
                    {
                        if (subGroup.Count() == 1 && subGroup.Key == subGroup.First().Name)
                        {
                            catNode.Children.Add(new EquipmentTreeNodeViewModel(subGroup.First(), _logger));
                        }
                        else
                        {
                            var subNode = new EquipmentTreeNodeViewModel(subGroup.Key, _logger);
                            foreach (var eq in subGroup)
                                subNode.Children.Add(new EquipmentTreeNodeViewModel(eq, _logger));
                            catNode.Children.Add(subNode);
                        }
                    }
                    typeNode.Children.Add(catNode);
                }
            }
            target.Add(typeNode);
        }
        _logger?.Log($"BuildTree: Resulting tree has {target.Count} root nodes.");
    }
    private void CloseAddDialog()
    {
        IsAddDialogOpen = false;
    }
    private async Task SaveNewEquipmentAsync()
    {
        if (!ValidateEquipment(NewEquipment, out var error))
        {
            ErrorMessage = error;
            ConfirmationMessage = null;
            return;
        }
        await _equipmentRepository.AddAsync(NewEquipment);
        FilteredEquipment.Add(NewEquipment);
        PoolTree.Add(new EquipmentTreeNodeViewModel(NewEquipment));
        StatusMessage = $"Added '{NewEquipment.Name}' to equipment pool.";
        ConfirmationMessage = StatusMessage;
        ErrorMessage = null;
        IsAddDialogOpen = false;
        await LoadAsync();
    }
    private void NotifyCanExecuteChanged() { }
    private string selectedCategory = string.Empty;
    public string SelectedCategory
    {
        get => selectedCategory;
        set
        {
            if (selectedCategory != value)
            {
                selectedCategory = value;
                OnPropertyChanged(nameof(SelectedCategory));
                SubcategoryOptions.Clear();
                if (addFormMode == AddFormMode.Weapon && !string.IsNullOrEmpty(value) && EquipmentManagerViewModel.WeaponCategorySubcategoryMap.TryGetValue(value, out var subs))
                {
                    foreach (var sub in subs)
                        SubcategoryOptions.Add(sub);
                    SelectedSubcategory = SubcategoryOptions.FirstOrDefault() ?? string.Empty;
                }
                else if (addFormMode == AddFormMode.Armour && !string.IsNullOrEmpty(value) && EquipmentManagerViewModel.ArmourCategorySubcategoryMap.TryGetValue(value, out var subs2))
                {
                    foreach (var sub in subs2)
                        SubcategoryOptions.Add(sub);
                    SelectedSubcategory = SubcategoryOptions.FirstOrDefault() ?? string.Empty;
                }
                else
                {
                    SelectedSubcategory = string.Empty;
                }
                NewEquipment.Category = value;
                NewEquipment.Subcategory = SelectedSubcategory;
                NotifyCanExecuteChanged();
            }
        }
    }
    private string selectedSubcategory = string.Empty;
    public string SelectedSubcategory
    {
        get => selectedSubcategory;
        set
        {
            if (selectedSubcategory != value)
            {
                selectedSubcategory = value;
                OnPropertyChanged(nameof(SelectedSubcategory));
                NewEquipment.Subcategory = value;
                NotifyCanExecuteChanged();
            }
        }
    }
    private void SyncStatPipViewModels()
    {
        NewEquipmentStatPips.Clear();
        _logger?.LogOperation("ArsenalManagerViewModel.SyncStatPipViewModels", $"NewEquipment instance: {NewEquipment.GetHashCode()}, Stats ref: {NewEquipment.Stats.GetHashCode()}, Stats count: {NewEquipment.Stats.Count}");
        foreach (var kvp in NewEquipment.Stats)
        {
            if (kvp.Key == StatType.Weight) continue;
            var pipVm = new StatPipViewModel(kvp.Key, kvp.Value, v => NewEquipment.SetStat(kvp.Key, v), _logger);
            NewEquipmentStatPips.Add(pipVm);
        }
        UpdateAvailableStatTypes();
    }
    private void UpdateAvailableStatTypes()
    {
        AvailableStatTypes.Clear();
        IEnumerable<StatType> allowed = NewEquipment.Type switch
        {
            EquipmentType.Weapon => new[] { StatType.Balance, StatType.Impact, StatType.Slash, StatType.Crush, StatType.Pierce, StatType.Thrust, StatType.Points },
            EquipmentType.Armour => new[] { StatType.SlashProtection, StatType.CrushProtection, StatType.PierceProtection, StatType.Points },
            EquipmentType.Shield => new[] { StatType.Coverage, StatType.Encumbrance, StatType.Points },
            _ => System.Array.Empty<StatType>()
        };
        foreach (var stat in allowed.Except(NewEquipment.Stats.Keys))
            AvailableStatTypes.Add(stat);
        if (AvailableStatTypes.Count > 0)
            SelectedStatType = AvailableStatTypes[0];
        else
            SelectedStatType = null;
    }
    private void AddStat()
    {
        if (SelectedStatType is StatType statType && !NewEquipment.Stats.ContainsKey(statType))
        {
            NewEquipment.Stats[statType] = 0.5f;
            SyncStatPipViewModels();
        }
    }
    private bool ValidateEquipment(EquipmentPiece equipment, out string? error)
    {
        if (string.IsNullOrWhiteSpace(equipment.Name))
        {
            error = "Name is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(equipment.Category))
        {
            error = "Category is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(equipment.Subcategory))
        {
            error = "Subcategory is required.";
            return false;
        }
        error = null;
        return true;
    }
    private void ShowAddWeaponForm()
    {
        _logger?.Log("ShowAddWeaponForm called");
        addFormMode = AddFormMode.Weapon;
        NewEquipment = new EquipmentPiece { Type = EquipmentType.Weapon, Category = "Sword" };
        SetCategoryOptionsForMode();
        SelectedCategory = CategoryOptions.FirstOrDefault() ?? string.Empty;
        UpdateAvailableStatTypes();
        UpdateNewEquipmentDrawing();
        AddDialogTitle = "Add Weapon";
        IsEditMode = false;
        IsAddDialogOpen = true;
    }
    private void ShowAddArmourForm()
    {
        _logger?.Log("ShowAddArmourForm called");
        addFormMode = AddFormMode.Armour;
        NewEquipment = new EquipmentPiece { Type = EquipmentType.Armour, Category = "Body" };
        SetCategoryOptionsForMode();
        SelectedCategory = CategoryOptions.FirstOrDefault() ?? string.Empty;
        UpdateAvailableStatTypes();
        UpdateNewEquipmentDrawing();
        AddDialogTitle = "Add Armour";
        IsEditMode = false;
        IsAddDialogOpen = true;
    }
    private void ShowAddShieldForm()
    {
        _logger?.Log("ShowAddShieldForm called");
        addFormMode = AddFormMode.Shield;
        NewEquipment = new EquipmentPiece { Type = EquipmentType.Shield, Category = "Buckler" };
        SetCategoryOptionsForMode();
        SelectedCategory = CategoryOptions.FirstOrDefault() ?? string.Empty;
        UpdateAvailableStatTypes();
        UpdateNewEquipmentDrawing();
        AddDialogTitle = "Add Shield";
        IsEditMode = false;
        IsAddDialogOpen = true;
    }
    private void SetCategoryOptionsForMode()
    {
        CategoryOptions.Clear();
        if (addFormMode == AddFormMode.Weapon)
        {
            foreach (var cat in EquipmentManagerViewModel.WeaponCategorySubcategoryMap.Keys)
                CategoryOptions.Add(cat);
        }
        else if (addFormMode == AddFormMode.Armour)
        {
            foreach (var cat in EquipmentManagerViewModel.ArmourCategorySubcategoryMap.Keys)
                CategoryOptions.Add(cat);
        }
        else if (addFormMode == AddFormMode.Shield)
        {
            if (EquipmentManagerViewModel.WeaponCategorySubcategoryMap.ContainsKey("Shield"))
            {
                foreach (var cat in EquipmentManagerViewModel.WeaponCategorySubcategoryMap["Shield"])
                    CategoryOptions.Add(cat);
            }
            else
            {
                CategoryOptions.Add("Shield");
            }
        }
    }
    private void AddFilter()
    {
        var filter = new EquipmentFilterViewModel(_logger) { FilterField = EquipmentFilterField.Category, Operator = EquipmentFilterOperator.Equals };
        filter.RemoveCommand = new SimpleCommand(() => { Filters.Remove(filter); });
        Filters.Add(filter);
        OnPropertyChanged(nameof(Filters)); // Force UI refresh
    }
    private void ApplyFilters()
    {
        FilteredEquipment = new ObservableCollection<EquipmentPiece>(GetFilteredEquipment(_allEquipment, Filters));
        BuildTree(FilteredEquipment, PoolTree);
        PoolTreeViewModel.TreeItems = PoolTree; // Notify UI
        _logger?.Log($"ApplyFilters: PoolTree rebuilt with {PoolTree.Count} root nodes from {FilteredEquipment.Count} filtered equipment.");
    }
    public static List<EquipmentPiece> GetFilteredEquipment(IEnumerable<EquipmentPiece> source, IEnumerable<EquipmentFilterViewModel> filters)
    {
        var all = source.ToList();
        foreach (var filter in filters)
        {
            all = ApplyFilterStatic(all, filter);
        }
        return all;
    }
    private static List<EquipmentPiece> ApplyFilterStatic(List<EquipmentPiece> source, EquipmentFilterViewModel filter)
    {
        switch (filter.FilterField)
        {
            case EquipmentFilterField.Category:
                if (filter.Value is string cat && !string.IsNullOrEmpty(cat))
                {
                    if (filter.Operator == EquipmentFilterOperator.Equals)
                        return source.FindAll(e => e.Category == cat);
                    if (filter.Operator == EquipmentFilterOperator.NotEquals)
                        return source.FindAll(e => e.Category != cat);
                }
                break;
            case EquipmentFilterField.Condition:
                if (filter.Value is EquipmentCondition cond)
                {
                    if (filter.Operator == EquipmentFilterOperator.Equals)
                        return source.FindAll(e => e.Condition == cond);
                    if (filter.Operator == EquipmentFilterOperator.NotEquals)
                        return source.FindAll(e => e.Condition != cond);
                }
                break;
            case EquipmentFilterField.Rank:
                if (filter.Value is Rank rank)
                {
                    if (filter.Operator == EquipmentFilterOperator.Equals)
                        return source.FindAll(e => e.Rank == rank);
                    if (filter.Operator == EquipmentFilterOperator.NotEquals)
                        return source.FindAll(e => e.Rank != rank);
                    if (filter.Operator == EquipmentFilterOperator.GreaterThan)
                        return source.FindAll(e => e.Rank > rank);
                    if (filter.Operator == EquipmentFilterOperator.LessThan)
                        return source.FindAll(e => e.Rank < rank);
                    if (filter.Operator == EquipmentFilterOperator.GreaterOrEqual)
                        return source.FindAll(e => e.Rank >= rank);
                    if (filter.Operator == EquipmentFilterOperator.LessOrEqual)
                        return source.FindAll(e => e.Rank <= rank);
                }
                break;
            case EquipmentFilterField.Stat:
                if (filter.Value is float statVal && !string.IsNullOrEmpty(filter.StatName))
                {
                    if (System.Enum.TryParse<StatType>(filter.StatName, out var statType))
                    {
                        switch (filter.Operator)
                        {
                            case EquipmentFilterOperator.Equals:
                                return source.FindAll(e => e.Stats.TryGetValue(statType, out var v) && v == statVal);
                            case EquipmentFilterOperator.NotEquals:
                                return source.FindAll(e => e.Stats.TryGetValue(statType, out var v) && v != statVal);
                            case EquipmentFilterOperator.GreaterThan:
                                return source.FindAll(e => e.Stats.TryGetValue(statType, out var v) && v > statVal);
                            case EquipmentFilterOperator.LessThan:
                                return source.FindAll(e => e.Stats.TryGetValue(statType, out var v) && v < statVal);
                            case EquipmentFilterOperator.GreaterOrEqual:
                                return source.FindAll(e => e.Stats.TryGetValue(statType, out var v) && v >= statVal);
                            case EquipmentFilterOperator.LessOrEqual:
                                return source.FindAll(e => e.Stats.TryGetValue(statType, out var v) && v <= statVal);
                        }
                    }
                }
                break;
        }
        return source;
    }
    public class SimpleCommand : ICommand
    {
        private readonly Action _execute;
        public SimpleCommand(Action execute) => _execute = execute;
        public event EventHandler? CanExecuteChanged { add { } remove { } }
        public bool CanExecute(object? parameter) => true;
        public void Execute(object? parameter) => _execute();
    }
    public Array EquipmentFilterFields => System.Enum.GetValues(typeof(EquipmentFilterField));
    public Array EquipmentFilterOperators => System.Enum.GetValues(typeof(EquipmentFilterOperator));
    public event PropertyChangedEventHandler? PropertyChanged;
    protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    private EquipmentDrawingInfo? newEquipmentDrawing;
    public EquipmentDrawingInfo? NewEquipmentDrawing
    {
        get => newEquipmentDrawing;
        set {
            if (newEquipmentDrawing != value) {
                _logger?.Log($"NewEquipmentDrawing changed: {(value == null ? "null" : value.GetType().ToString())}, Geometry: {(value?.Geometry == null ? "null" : value.Geometry.ToString())}");
                newEquipmentDrawing = value;
                OnPropertyChanged(nameof(NewEquipmentDrawing));
            }
        }
    }
    private void UpdateNewEquipmentDrawing()
    {
        _logger?.Log($"UpdateNewEquipmentDrawing called. NewEquipment.Type={NewEquipment?.Type}, Category={NewEquipment?.Category}");
        // Set image path based on type/category, but only if it would change
        if (NewEquipment != null)
        {
            string? imageFile = null;
            if (!string.IsNullOrWhiteSpace(NewEquipment.Category))
            {
                imageFile = $"avares://ExanimaToolsApp/Assets/{NewEquipment.Type.ToString().ToLowerInvariant()}_{NewEquipment.Category.ToLowerInvariant().Replace(" ", "_")}.png";
            }
            else
            {
                imageFile = $"avares://ExanimaToolsApp/Assets/{NewEquipment.Type.ToString().ToLowerInvariant()}.png";
            }
            if (NewEquipment.ImagePath != imageFile)
            {
                NewEquipment.ImagePath = imageFile;
                _logger?.Log($"Set NewEquipment.ImagePath: {imageFile}");
            }
        }
        var req = new EquipmentDrawingRequest
        {
            Type = NewEquipment?.Type.ToString(),
            Category = NewEquipment?.Category
        };
        var converter = new EquipmentTypeAndCategoryToDrawingConverter();
        var drawing = converter.Convert(req, typeof(EquipmentDrawingInfo), null, System.Globalization.CultureInfo.CurrentCulture) as EquipmentDrawingInfo;
        _logger?.Log($"Drawing result: {(drawing == null ? "null" : $"Geometry={drawing.Geometry}, Fill={drawing.Fill}, Stroke={drawing.Stroke}")}");
        if (drawing != null)
            _logger?.Log($"Drawing.Geometry: {drawing.Geometry?.ToString() ?? "null"}");
        NewEquipmentDrawing = drawing;
    }
    // Returns a list of StatPipViewModel for pip stats (excluding Weight) for the selected item
    public List<StatPipViewModel> SelectedPoolTreeItemPipStats
    {
        get
        {
            var result = new List<StatPipViewModel>();
            var eq = SelectedPoolTreeItem?.EquipmentPiece;
            if (eq == null || eq.Stats == null) return result;
            foreach (var kvp in eq.Stats)
            {
                if (kvp.Key == StatType.Weight) continue;
                if (IsPipStat(kvp.Key))
                {
                    result.Add(new StatPipViewModel(kvp.Key, kvp.Value, v => eq.SetStat(kvp.Key, v)));
                }
            }
            // Optionally sort by stat type for consistent display
            result.Sort((a, b) => a.Stat.ToString().CompareTo(b.Stat.ToString()));
            return result;
        }
    }
    // Helper: which stats are pip stats (should match add form logic)
    public static bool IsPipStat(StatType stat)
    {
        return stat == StatType.Balance || stat == StatType.Impact || stat == StatType.Slash || stat == StatType.Crush ||
               stat == StatType.Pierce || stat == StatType.Thrust || stat == StatType.Points ||
               stat == StatType.SlashProtection || stat == StatType.CrushProtection || stat == StatType.PierceProtection ||
               stat == StatType.Coverage || stat == StatType.Encumbrance;
    }
    // ViewModel for the stat card control
    public EquipmentStatCardViewModel? StatCardViewModel
    {
        get
        {
            var eq = SelectedPoolTreeItem?.EquipmentPiece;
            if (eq == null) return null;
            return new EquipmentStatCardViewModel(eq, EditEquipmentFromTreeCommand, _logger);
        }
    }
    // Expose EditEquipmentFromTreeCommand for stat card
    public ICommand EditEquipmentFromTreeCommand => editEquipmentFromTreeCommand;
    private readonly ICommand editEquipmentFromTreeCommand;
    // Helper ViewModel for stat card
    public class EquipmentStatCardViewModel
    {
        public EquipmentPiece EquipmentPiece { get; }
        public List<StatPipViewModel> PipStats { get; }
        public ICommand EditEquipmentFromTreeCommand { get; }
        public EquipmentStatCardViewModel(EquipmentPiece eq, ICommand editCommand, ILoggingService? logger = null)
        {
            EquipmentPiece = eq;
            PipStats = new List<StatPipViewModel>();
            logger?.Log($"[DEBUG] [EquipmentStatCardViewModel] Stats for {eq.Name}: {string.Join(", ", eq.Stats.Select(kv => $"{kv.Key}={kv.Value}"))}");
            logger?.Log($"[DEBUG] [EquipmentStatCardViewModel] EquipmentPiece instance: {eq.GetHashCode()}, Stats ref: {eq.Stats.GetHashCode()}, Stats count: {eq.Stats.Count}");
            foreach (var kvp in eq.Stats)
            {
                logger?.Log($"[DEBUG]   Stat: {kvp.Key}, Value: {kvp.Value}, IsPipStat: {ArsenalManagerViewModel.IsPipStat(kvp.Key)}");
                if (kvp.Key == StatType.Weight) continue;
                if (ArsenalManagerViewModel.IsPipStat(kvp.Key)) {
                    var pipVm = new StatPipViewModel(kvp.Key, kvp.Value, v => eq.SetStat(kvp.Key, v), logger);
                    logger?.LogOperation("EquipmentStatCardViewModel.PipStatCreated", $"{kvp.Key}={kvp.Value}");
                    PipStats.Add(pipVm);
                }
            }
            logger?.LogOperation("EquipmentStatCardViewModel.PipStatsFinal", $"Count: {PipStats.Count}, [{string.Join(", ", PipStats.Select(p => p.StatLabel + "=" + p.Value))}]");
            PipStats.Sort((a, b) => a.Stat.ToString().CompareTo(b.Stat.ToString()));
            EditEquipmentFromTreeCommand = editCommand;
        }
    }
    private void EditEquipmentFromTree(EquipmentPiece? equipment)
    {
        if (equipment == null) return;
        // Manual copy for editing
        NewEquipment = new EquipmentPiece {
            Name = equipment.Name,
            Type = equipment.Type,
            Category = equipment.Category,
            Subcategory = equipment.Subcategory,
            Rank = equipment.Rank,
            Points = equipment.Points,
            Weight = equipment.Weight,
            Description = equipment.Description,
            Quality = equipment.Quality,
            Condition = equipment.Condition,
            Slot = equipment.Slot,
            Layer = equipment.Layer,
            ImagePath = equipment.ImagePath,
            Stats = new Dictionary<StatType, float>(equipment.Stats)
        };
        // Ensure dropdowns and pip stats are always updated
        addFormMode = equipment.Type switch
        {
            EquipmentType.Weapon => AddFormMode.Weapon,
            EquipmentType.Armour => AddFormMode.Armour,
            EquipmentType.Shield => AddFormMode.Shield,
            _ => AddFormMode.None
        };
        SetCategoryOptionsForMode();
        // Set selected values after options are filled
        if (!string.IsNullOrEmpty(equipment.Category) && CategoryOptions.Contains(equipment.Category))
            SelectedCategory = equipment.Category;
        else if (CategoryOptions.Count > 0)
            SelectedCategory = CategoryOptions[0];
        if (!string.IsNullOrEmpty(equipment.Subcategory) && SubcategoryOptions.Contains(equipment.Subcategory))
            SelectedSubcategory = equipment.Subcategory;
        else if (SubcategoryOptions.Count > 0)
            SelectedSubcategory = SubcategoryOptions[0];
        UpdateAvailableStatTypes();
        SyncStatPipViewModels();
        IsAddDialogOpen = true;
        AddDialogTitle = $"Edit {equipment.Name}";
        // Set form mode, etc. as needed
    }
}
